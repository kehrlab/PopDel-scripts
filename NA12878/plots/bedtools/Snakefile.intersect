configfile: "scripts/bedtools/config.yaml"


##### DO NOT TOUCH THIS! ####
TRUTH=config["truth"]
TRUTHNOCENTROMERES="{out}/truth.{L}-{R}.NoCentromeres.bed"

OVERLAP=config["overlap"]

POPDELBED="{out}/popdel.deletions.{L}-{R}.NoCentromeres.bed"
DELLYBED="{out}/delly.deletions.{L}-{R}.NoCentromeres.bed"
MANTABED="{out}/manta.deletions.{L}-{R}.NoCentromeres.bed"
SMOOVEBED="{out}/smoove.deletions.{L}-{R}.NoCentromeres.bed"

POPDELTP="{out}/tp.popdel.{L}-{R}.bed"
SMOOVETP="{out}/tp.smoove.{L}-{R}.bed"
DELLYTP="{out}/tp.delly.{L}-{R}.bed"
MANTATP="{out}/tp.manta.{L}-{R}.bed"

INTERPOPDELDELLY="{out}/intersect.popdel.delly.{L}-{R}.bed"
INTERPOPDELSMOOVE="{out}/intersect.popdel.smoove.{L}-{R}.bed"
INTERPOPDELMANTA="{out}/intersect.popdel.manta.{L}-{R}.bed"
INTERTPPOPDELDELLY="{out}/intersect.tp.popdel.delly.{L}-{R}.bed"
INTERTPPOPDELSMOOVE="{out}/intersect.tp.popdel.smoove.{L}-{R}.bed"
INTERTPPOPDELMANTA="{out}/intersect.tp.popdel.manta.{L}-{R}.bed"


COUNT=expand("{out}/counts.{truth}.{L}-{R}.{o}.tsv", out=config["outpath"], truth=config["truthSet"], L=config["left"], R=config["right"], o=config["overlap"])

##### DO NOT TOUCH THIS! ####

rule all:
   input:
      COUNT

rule filterTruth:
    input:
        TRUTH
    output:
        temp("{out}/truth.{L}-{R, 10000}.bed")
    params:
        getRange="awk '{if ($3-$2 >= {L} && $3-$2 <= {R}){print $0}}'"
    shell:
        "grep -v \"^X\" {input} | grep -v \"^Y\" | {params.getRange} | sort -u -k1,1 -k2n,2n -k3n,3n > {output}"

rule centromereFilterTruth:
    input:
        truth="{out}/truth.{L}-{R}.bed",
        regions=config["centromereFile"]
    output:
        temp(TRUTHNOCENTROMERES)
    shell:
        "bedtools intersect -v -a {input.truth} -b {input.regions} > {output}"

rule vcf2bed_popdel:
   input:
      config["vcfs"]["popdel"]
   output:
      temp("{out}/popdel.deletions.{L}-{R, 10000}.bed",)
   params:
      getRange="awk -v OFS='\\t' '{if ($9 >= {L} && $9 <= {R}){print $1,$2,$2+$9}}'"
   shell:
      "grep -v ^# {input} | grep -v \"^chrUn\" | grep -v \"random\" | grep -v \"chrY\" | grep -v \"chrX\" | sed 's/;/\\t/g' | sed -e 's;SVLEN=-;;g' | {params.getRange} | sort -u -k1,1 -k2n,2n -k3n,3n > {output}"

rule vcf2bed_delly:
   input:
      config["vcfs"]["delly"]
   output:
      temp("{out}/delly.deletions.{L}-{R, 10000}.bed",)
   params:
      getRange="awk '{if($3 - $2 >= {L} && $3 - $2 <= {R}){print $0}}'"
   shell:
      "grep -v ^# {input} | grep -v \"0/0\" | grep -v \"^chrUn\" | grep -v \"random\" | grep -v \"chrM\" | grep -v \"chrEBV\" | grep -v \"chrY\" | grep -v \"chrX\" | grep \"SVTYPE=DEL\" | awk '{{if($7==\"PASS\"){{print $0}}}}' | sed 's/;/\\t/g' | cut -f 1,2,12 | sed 's/END=//g' | {params.getRange} | sort -u -k1,1 -k2n,2n -k3n,3n > {output}"

rule vcf2bed_smoove:
   input:
      config["vcfs"]["smoove"]
   output:
      temp("{out}/smoove.deletions.{L}-{R, 10000}.bed",)
   params:
      getRange="awk '{if($3 - $2 >= {L} && $3 - $2 <= {R}){print $0}}'"
   shell:
      "zcat {input} | grep -v ^# | grep -v \"^chrUn\" | grep -v \"random\" | grep -v \"chrM\" | grep -v \"chrEBV\" | grep -v \"chrY\" | grep -v \"chrX\" | grep \"SVTYPE=DEL\" | sed 's/;/\\t/g' | cut -f 1,2,10 | sed 's/END=//g' | {params.getRange} | sort -n -u -k1,1 -k2n,2n -k3n,3n > {output}"

rule vcf2bed_manta:
   input:
      config["vcfs"]["manta"]
   output:
      temp("{out}/manta.deletions.{L}-{R, 10000}.bed",)
   params:
      getRange="awk '{if($3 - $2 >= {L} && $3 - $2 <= {R}){print $0}}'"
   shell:
      "zcat {input} | grep -v ^# | grep \"SVTYPE=DEL\" | grep -v \"^chrUn\" | grep -v \"random\" | grep -v \"chrM\" | grep -v \"chrEBV\" | grep -v \"chrY\" | grep -v \"chrX\" |  sed -e 's/;/\\t/g' -e 's/END=//g' | cut -f 1,2,8 | {params.getRange} | sort -u -k1,1 -k2n,2n -k3n,3n > {output}"

rule centromereFilterCalls:
   input:
      calls="{out}/{tool}.deletions.{L}-{R}.bed",
      centro=config["centromereFile"]
   output:
     temp("{out}/{tool}.deletions.{L}-{R}.NoCentromeres.bed")
   shell:
      "bedtools intersect -v -a {input.calls} -b {input.centro} > {output}"

rule get_tp:
   input:
      calls="{out}/{tool}.deletions.{L}-{R}.NoCentromeres.bed",
      truth=TRUTHNOCENTROMERES
   output:
      temp("{out}/tp.{tool}.{L}-{R}.bed")
   params:
      OVERLAP
   shell:
      "bedtools intersect -wa -u -r -f {params} -a {input.truth} -b {input.calls} > {output}"

rule overlapPopDelX:
   input:
      first=POPDELBED,
      second="{out}/{tool}.deletions.{L}-{R}.NoCentromeres.bed"
   output:
      temp("{out}/intersect.popdel.{tool, (delly|smoove|manta)}.{L}-{R}.bed")
   params:
      OVERLAP
   shell:
      "bedtools intersect -wa -u -r -f {params} -a {input.first} -b {input.second} > {output}"

rule overlapTpPopdelX:
   input:
      first="{out}/tp.popdel.{L}-{R}.bed",
      second="{out}/tp.{tool}.{L}-{R}.bed"
   output:
      temp("{out}/intersect.tp.popdel.{tool, (delly|smoove|manta)}.{L}-{R}.bed")
   params:
      OVERLAP
   shell:
      "bedtools intersect -wa -u -r -f {params} -a {input.first} -b {input.second} > {output}"


rule getCounts:
   input:
      truth=TRUTHNOCENTROMERES,
      popdel=POPDELBED,
      delly=DELLYBED,
      smoove=SMOOVEBED,
      manta=MANTABED,
      popdel_delly=INTERPOPDELDELLY,
      popdel_smoove=INTERPOPDELSMOOVE,
      popdel_manta=INTERPOPDELMANTA,
      tp_popdel=POPDELTP,
      tp_delly=DELLYTP,
      tp_smoove=SMOOVETP,
      tp_manta=MANTATP,
      tp_popdel_delly=INTERTPPOPDELDELLY,
      tp_popdel_smoove=INTERTPPOPDELSMOOVE,
      tp_popdel_manta=INTERTPPOPDELMANTA
   output:
      expand("{{out}}/counts.{truthSet}.{{L}}-{{R}}.{overlap}.tsv", truthSet=config["truthSet"], overlap=config["overlap"])
   shell:
      """
      set +o pipefail
      wc -l {input.truth} {input.popdel} {input.delly} {input.smoove} {input.manta} | head -n5 > {output}
      wc -l {input.tp_popdel} {input.tp_delly} {input.tp_smoove} {input.tp_manta} {input.popdel_delly} {input.popdel_smoove} {input.popdel_manta} {input.tp_popdel_delly} {input.tp_popdel_smoove} {input.tp_popdel_manta} | head -n10 >> {output}

      sed -i -e \"s;{input.truth};truth;g\" \
      -e \"s;{input.popdel};popdel;g\" \
      -e \"s;{input.delly};delly;g\" \
      -e \"s;{input.smoove};smoove;g\" \
      -e \"s;{input.manta};manta;g\" \
      -e \"s;{input.tp_popdel};truth_popdel;g\" \
      -e \"s;{input.tp_delly};truth_delly;g\" \
      -e \"s;{input.tp_smoove};truth_smoove;g\" \
      -e \"s;{input.tp_manta};truth_manta;g\" \
      -e \"s;{input.popdel_delly};popdel_delly;g\" \
      -e \"s;{input.popdel_smoove};popdel_smoove;g\" \
      -e \"s;{input.popdel_manta};popdel_manta;g\" \
      -e \"s;{input.tp_popdel_delly};truth_popdel_delly;g\" \
      -e \"s;{input.tp_popdel_smoove};truth_popdel_smoove;g\" \
      -e \"s;{input.tp_popdel_manta};truth_popdel_manta;g\" \
      {output}
      """
